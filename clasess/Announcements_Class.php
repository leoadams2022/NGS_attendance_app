<?php
require_once 'Crud.class.php';

class Announcements_Class extends Crud {

    
    public function __construct(){
       
            $this->test();
        
          
    }
    /**
     * created_at changes on update 
     * date_send stay the same
     * admin_alert
     * AutoGenerated
     */
    public function delete_AutoGenerated_and_admin_alert(){
        $data = $this->query("SELECT `id`, `status`,`created_at`, `date_send` FROM `announcements` WHERE `auther` = 'AutoGenerated' AND `status` = 'yes' OR `auther` = 'admin_alert' AND `status` = 'yes';");
        $today = date("Y/m/d",time());
        $date1 = new DateTime($today);
        if(!empty($data)){
            foreach ($data as $key => $msg) {
                $msg_date_ms = strtotime($msg['created_at']);
                $msg_date = date("Y/m/d",$msg_date_ms);
                $date2 = new DateTime($msg_date);
                $interval = $date1->diff($date2);
                $diff = $interval->days;
                if($diff > 15){$this->delete_msg_admin($msg['id']);}
            }
        }
    }

    public function get_msgs_by_username($username,$rank,$limit,$offset){
         if($limit > 0){
            $data = $this->query("SELECT `id`, `recipient`, `campaign`, `status`, `msg`, `auther`, `created_at`, `date_send` FROM `announcements` WHERE `recipient` = '$username' ORDER BY `created_at` DESC LIMIT $limit OFFSET $offset");
            if(!empty($data)){
            $data = array_reverse($data);
            }
         }else{
            $data = $this->query("SELECT `id`, `recipient`, `campaign`, `status`, `msg`, `auther`, `created_at`, `date_send` FROM `announcements` WHERE `recipient` = '$username' ORDER BY `created_at` ASC");
         }
        if($rank === 'agent'){
            return $data;
        }elseif($rank === 'admin'){
            if(!empty($data)){
                return $data;
            }else{
                return 'no messages were found :(';
            }
        }        
    }

    public function get_msgs_by_campaign($campaign,$rank,$limit,$offset){
        // $Crud =   new Crud(DATA_BASE,USER,PASSWORD);
        //`id`, `recipient`, `msg`, `auther`, `created_at`, `date_send`
        // $data = $this->find('all', array(
        //     'table'      => 'announcements',
        //     'fields'     => array('id', 'recipient', 'campaign', 'status', 'msg', 'auther', 'created_at', 'date_send'), // 
        //     'conditions' => array('campaign' => $campaign) //
        //     )
        // );
        if($limit > 0){
            $data = $this->query("SELECT `id`, `recipient`, `campaign`, `status`, `msg`, `auther`, `created_at`, `date_send` FROM `announcements` WHERE `campaign` = '$campaign' ORDER BY `created_at` DESC LIMIT $limit OFFSET $offset");
            if(!empty($data)){
            $data = array_reverse($data);
            }
         }else{
            $data = $this->query("SELECT `id`, `recipient`, `campaign`, `status`, `msg`, `auther`, `created_at`, `date_send` FROM `announcements` WHERE `campaign` = '$campaign' ORDER BY `created_at` ASC");
         }
        if($rank === 'agent'){
            return $data;
        }elseif($rank === 'admin'){
            if(!empty($data)){
                return $data;
            }else{
                return 'no messages were found :(';
            }
        }
    }

    public function get_msgs_by_campaign_and_username($campaign,$username,$limit,$offset){
        if($limit > 0){
       //SELECT `id`, `recipient`, `campaign`, `status`, `msg`, `auther`, `created_at`, `date_send` FROM `announcements` WHERE `recipient` = $username OR `campaign` = $campaign ORDER BY `date_send` DESC LIMIT $limit OFFSET $offset
       $data = $this->query("SELECT `id`, `recipient`, `campaign`, `status`, `msg`, `auther`, `created_at`, `date_send` FROM `announcements` WHERE `recipient` = '$username' OR `campaign` = '$campaign' ORDER BY `created_at` DESC LIMIT $limit OFFSET $offset");
       return $data;
       end();
        }else{
            $data = $this->query("SELECT `id`, `recipient`, `campaign`, `status`, `msg`, `auther`, `created_at`, `date_send` FROM `announcements` WHERE `recipient` = '$username' OR `campaign` = '$campaign'  ORDER BY `created_at` ASC");
        }

    }

    public function set_status_to_yes($msgs_ids=[]){
        // $Crud =   new Crud(DATA_BASE,USER,PASSWORD);
        foreach ($msgs_ids as $msg_id){
            $update = $this->save(array(
                'table'  => 'announcements',
                'id'  => $msg_id, // you need to pass a id (int)
                'status' => 'yes'
                )
            );
            // if($update !==FALSE){
            //     return "successfully updated data add yes to all"; // data is updated successfully
            // }
        }
    }

    public function get_unread_msgs_count($recipient,$campaign='null'){
        // $Crud =   new Crud(DATA_BASE,USER,PASSWORD);
        $data_res = $this->find('all', array(
            'table'      => 'announcements',
            'fields'     => array('id', 'recipient', 'status', 'msg', 'auther', 'created_at', 'date_send'), // 
            'conditions' => array('recipient' => $recipient, 'status' => 'no') //
            )
        );
        if($campaign != 'null' ){
            $data_cam = $this->find('all', array(
                'table'      => 'announcements',
                'fields'     => array('id', 'recipient', 'status', 'msg', 'auther', 'created_at', 'date_send'), // 
                'conditions' => array('campaign' => $campaign, 'status' => 'no') //
                )
            );
        }else{
            $data_cam = 0;
        }
        if($data_res != 0 && $data_cam != 0){
            $counter = count($data_res) + count($data_cam);
            return ($counter);
        }elseif($data_res != 0){
            $counter = count($data_res);
            return ($counter);
        }elseif($data_cam != 0){
            $counter = count($data_cam);
            return ($counter);
        }else{
            return 0;
        }
        

    }
    // admin methods
    public function add_msg_by_recipients($auther,$msg,$recipients=[]){
        // $Crud =   new Crud(DATA_BASE,USER,PASSWORD);
        date_default_timezone_set("Etc/GMT-2");
        $adding_time = date("Y-m-d H:i:s"); 
        $retuers=[];
        foreach ($recipients as $recipient) {
        //(`id`, `recipient`, `msg`, `auther`, `created_at`, `date_send`)
            $data = $this->save(array(
                    'table'  => 'announcements',
                    'recipient'  => $recipient,
                    'msg' => $msg,
                    'auther' => $auther,
                    'created_at' => $adding_time
                ));
                if($data !==FALSE){
                    array_push($retuers,$recipient.' data success');
                }
            }
        return $retuers;
    }
    public function add_msg_by_campaign($auther,$msg,$campaign=[]){
        // $Crud =   new Crud(DATA_BASE,USER,PASSWORD);
        date_default_timezone_set("Etc/GMT-2");
        $adding_time = date("Y-m-d H:i:s"); 
        $retuers=[];
        foreach ($campaign as $campaign) {
            $data = $this->save(array(
                    'table'  => 'announcements',
                    'campaign'  => $campaign,
                    'msg' => $msg,
                    'auther' => $auther,
                    'created_at' => $adding_time
                ));
                if($data !==FALSE){
                    array_push($retuers,' data success');
                }
            }
        return $retuers;
    }
    public function get_all_msgs_admin(){
        $data = $this->query("SELECT * FROM `announcements` WHERE `auther` != 'AutoGenerated' ORDER BY `created_at`");
        if(!empty($data)){
            return $data;
        }else{
            return 'no messages were found :(';
        }
    }
    public function update_msg_admin($msg_id,$new_msg){
        // $Crud =   new Crud(DATA_BASE,USER,PASSWORD);
        if(!empty($msg_id)&&!empty($new_msg)){
            date_default_timezone_set("Etc/GMT-2");
		    $updat_time = date("Y-m-d H:i:s"); 
            $update = $this->save(array(
                'table'  => 'announcements',
                'id'  => $msg_id, // you need to pass a id (int)
                'msg' => $new_msg,
                'created_at' => $updat_time,
                'status' => 'no'
                )
            );
            if($update !==FALSE){
                echo "successfully updated Message"; // data is updated successfully
            }
        }else{
            return 'empty filed';
        }
    }
    public function delete_msg_admin($msg_id){
        // $Crud =   new Crud(DATA_BASE,USER,PASSWORD);
        if(!empty($msg_id)){
            $delete = $this->delete(array(
                'table' => 'announcements',
                'id'    => $msg_id // int value
                )
            );
        }
    }
    public function delete_all_AutoGenerated(){
        $data = $this->query("DELETE FROM `announcements` WHERE `auther` = 'AutoGenerated'");
    }

    public function alert_admin_agent_late($agentUserName,$adminsUserNames,$inOrOut){
        $msg;
        if($inOrOut === 'in'){
            $msg = $agentUserName.' got in late';
        }elseif($inOrOut === 'out'){
            $msg = $agentUserName.' left erlay';
        }
        date_default_timezone_set("Etc/GMT-2");
        $adding_time = date("Y-m-d H:i:s");
        foreach ($adminsUserNames as $admin) {
            $data = $this->save(array(
                    'table'  => 'announcements',
                    'recipient'  => $admin['user_name'],
                    'msg' => $msg,
                    'auther' => 'admin_alert',
                    'created_at' => $adding_time
                ));
        } 
    }
   
}
